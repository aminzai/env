# Hostname styles
FULL='\H'
SHORT='\h'

# System => color/hostname map:
# UC: username color
# LC: location/cwd color
# HD: hostname display (\h vs \H)
# Defaults:
UC=$GREEN
LC=$BLUE
HD=$SHORT

HOST=`hostname | cut -d '.' -f 1`
DOMAIN=`hostname | cut -d '.' -f 2-`


# Prompt function because PROMPT_COMMAND is awesome
function set_prompt() {
    local EXIT="$?"
    host="${UC}${HD}${COLOR_OFF}"

    # Special vim-tab-like shortpath (~/folder/directory/foo => ~/f/d/foo)
    _pwd=`pwd | sed "s#$HOME#~#"`
    if [[ $_pwd == "~" ]]; then
        _dirname=$_pwd
    else
        _dirname=`dirname "$_pwd" | sed -E "s/\/(.)[^\/]*/\/\1/g"`
        if [[ $_dirname == "/" ]]; then
            _dirname=""
        fi
        _dirname="$_dirname/`basename "$_pwd"`"
    fi
    path="${LC}${_dirname}${COLOR_OFF}"

    # Virtualenv
    _venv=`basename "$VIRTUAL_ENV"`
    venv="" # need this to clear it when we leave a venv
    if [[ -n $_venv ]]; then
        venv=" ${COLOR_OFF}{${PURPLE}${_venv}${COLOR_OFF}}"
    fi

    # Git branch / dirtiness
    # Dirtiness cribbed from:
    # http://henrik.nyh.se/2008/12/git-dirty-prompt#comment-8325834
    if git update-index -q --refresh 2>/dev/null; git diff-index --quiet --cached HEAD --ignore-submodules -- 2>/dev/null && git diff-files --quiet --ignore-submodules 2>/dev/null
        then dirty=""
    else
        dirty="${RED}*${COLOR_OFF}"
    fi
    _branch=$(git symbolic-ref HEAD 2>/dev/null)
    _branch=${_branch#refs/heads/} # apparently faster than sed
    branch="" # need this to clear it when we leave a repo
    if [[ -n $_branch ]]; then
        branch=" ${COLOR_OFF}[${PURPLE}${_branch}${dirty}${COLOR_OFF}]"
    fi

    # Dollar/pound sign
    end="\n${LC}\$${COLOR_OFF} "

    # Time (useful when catting logs)
    time="[${IBLACK}$(date +"%R")${COLOR_OFF}]"

    # Return State
    state="(${GREEN}${EXIT}${COLOR_OFF})"
    if [ ${EXIT} != "0" ];then
        state="(${RED}${EXIT}${COLOR_OFF})"
    fi
	    

    # user
    user="${CYAN}${USER}${COLOR_OFF}"

    # include host in terminal title only if not local host
    if [[ -n $SSH_CLIENT ]]; then
        shorthost="${HOST}:"
    else
        shorthost=""
    fi

    # If this is an xterm set the title to host:dir
    case "$TERM" in
    xterm*|rxvt*)
        title="\[\e]0;${shorthost}${_dirname}\a\]"
        ;;
    *)
	title=""
        ;;
    esac

    # Put it all together
    export PS1="${title}\n${time}-${state}-[${user}@${host}]:${path}${branch}${venv} ${end}"
}
export PROMPT_COMMAND=set_prompt
